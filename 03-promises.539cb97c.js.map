{"mappings":"YAEA,IAAMA,EAAQC,SAASC,cAAc,yBAC/BC,EAAOF,SAASC,cAAc,wBAC9BE,EAASH,SAASC,cAAc,0BAwBtC,SAASG,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,GACFO,QAAQC,IAAI,WACZJ,EAAQ,CAAEN,WAAUW,MAAAV,MAGpBQ,QAAQC,IAAI,SACZH,EAAO,CAAEP,WAAUW,MAAAV,I,GAEpBA,E,IAnCMN,SAASC,cAAc,QAG/BgB,iBAAiB,UAEtB,SAAmBC,GACjBA,EAAMC,iBACN,IAAMC,EAAarB,EAAMsB,MACnBC,EAAYpB,EAAKmB,MACjBE,EAAcpB,EAAOkB,MAC3BjB,IACCoB,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUqB,EAAKD,EAALT,MACjBF,QAAQC,IAAI,uBAAwCY,OAAftB,EAAS,QAAYsB,OAAND,EAAM,M,IAE3DE,OAAM,SAAAH,G,IAAGpB,EAAQoB,EAARpB,SAAUwB,EAAKJ,EAALT,MAClBF,QAAQC,IAAI,sBAAqCY,OAAftB,EAAS,QAAYsB,OAANE,EAAM,M,IAEzDf,QAAQC,IAAIK,EAAYE,EAAWC,GAEnCO,EAAY/B,EAAMG,EAAKC,GAoCvBJ,EAAMsB,MAAS,GACfnB,EAAKmB,MAAQ,GACblB,EAAOkB,MAAS,E,IAhBlB,IAAMS,EAAc,WAElB,IADA,IAAIC,EAAO,EACFC,EAAI,EAAGA,EAAI7B,EAAQ6B,GAAK,EACrB,IAANA,EACFD,EAAOhC,EAEPgC,GAAc7B,EAAKmB,MAEpBjB,EAAc4B,EAAED,E","sources":["src/js/03-promises.js"],"sourcesContent":["// const { formats } = require(\"flatpickr/dist/utils/formatting\");\n\nconst delay = document.querySelector('input[name = \"delay\"]');\nconst step = document.querySelector('input[name = \"step\"]')\nconst amount = document.querySelector('input[name = \"amount\"]');\nconst form = document.querySelector(\"form\");\n\n\nform.addEventListener('submit', onSubmit)\n\nfunction onSubmit (event) {\n  event.preventDefault();\n  const delayValue = delay.value;\n  const stepValue = step.value;\n  const amountValue = amount.value;\n  createPromise()\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  console.log(delayValue, stepValue, amountValue);\n  // promiseStep(delayValue, stepValue, amountValue);\n  cickleMaker(delay,step,amount);\n  clearInput();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        console.log('Success');\n        resolve({ position, delay })\n      }\n      else {\n        console.log('Error')\n        reject({ position, delay })\n      }\n    }, delay);\n  })\n}\n\n\n\nconst cickleMaker = () => {\n  let time = 0;\n  for (let i = 1; i < amount; i += 1) {\n    if (i === 1) {\n      time = delay;\n    }else{\n      time = time + step.value;\n    }\n     createPromise(i,time);\n  }\n\n}\n\nfunction clearInput() {\n  delay.value = ``;\n  step.value= ``;\n  amount.value = ``;\n}\n\n\n\n// count += 1;\n//   }, 1000);\n// });\n\n//  if (count===5) {\n//     clearInterval(intervalID);\n//     console.log(`Interval with id ${intervalID} has stopped!`);\n//   }\n\n"],"names":["$ce04d3a99e08e73b$var$delay","document","querySelector","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","console","log","delay","addEventListener","event","preventDefault","delayValue","value","stepValue","amountValue","then","param","delay1","concat","catch","delay2","$ce04d3a99e08e73b$var$cickleMaker","time","i"],"version":3,"file":"03-promises.539cb97c.js.map"}