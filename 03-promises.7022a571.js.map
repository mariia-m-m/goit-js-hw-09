{"mappings":"AAEA,MAAMA,EAAQC,SAASC,cAAc,yBAC/BC,EAAOF,SAASC,cAAc,wBAC9BE,EAASH,SAASC,cAAc,0BAwBtC,SAASG,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,GACFO,QAAQC,IAAI,WACZJ,EAAQ,C,SAAEN,EAAUW,MAAAV,MAGpBQ,QAAQC,IAAI,SACZH,EAAO,C,SAAEP,EAAUW,MAAAV,I,GAEpBA,EAAM,G,CAnCAN,SAASC,cAAc,QAG/BgB,iBAAiB,UAEtB,SAAmBC,GACjBA,EAAMC,iBACN,MAAMC,EAAarB,EAAMsB,MACnBC,EAAYpB,EAAKmB,MACjBE,EAAcpB,EAAOkB,MAC3BjB,IACCoB,MAAK,EAACnB,SAAEA,EAAUW,MAAAS,MACjBX,QAAQC,IAAI,uBAAqBV,QAAiBoB,MAAU,IAE7DC,OAAM,EAACrB,SAAEA,EAAUW,MAAAW,MAClBb,QAAQC,IAAI,sBAAoBV,QAAesB,MAAU,IAE3Db,QAAQC,IAAIK,EAAYE,EAAWC,GAEnCK,EAAY7B,EAAMG,EAAKC,GAoCvBJ,EAAMsB,MAAQ,GACdnB,EAAKmB,MAAO,GACZlB,EAAOkB,MAAQ,E,IAhBjB,MAAMO,EAAc,KAClB,IAAIC,EAAO,EACX,IAAK,IAAIC,EAAI,EAAGA,EAAI3B,EAAQ2B,GAAK,EACrB,IAANA,EACFD,EAAO9B,EAEP8B,GAAc3B,EAAKmB,MAEpBjB,EAAc0B,EAAED,E","sources":["src/js/03-promises.js"],"sourcesContent":["// const { formats } = require(\"flatpickr/dist/utils/formatting\");\n\nconst delay = document.querySelector('input[name = \"delay\"]');\nconst step = document.querySelector('input[name = \"step\"]')\nconst amount = document.querySelector('input[name = \"amount\"]');\nconst form = document.querySelector(\"form\");\n\n\nform.addEventListener('submit', onSubmit)\n\nfunction onSubmit (event) {\n  event.preventDefault();\n  const delayValue = delay.value;\n  const stepValue = step.value;\n  const amountValue = amount.value;\n  createPromise()\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  console.log(delayValue, stepValue, amountValue);\n  // promiseStep(delayValue, stepValue, amountValue);\n  cickleMaker(delay,step,amount);\n  clearInput();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        console.log('Success');\n        resolve({ position, delay })\n      }\n      else {\n        console.log('Error')\n        reject({ position, delay })\n      }\n    }, delay);\n  })\n}\n\n\n\nconst cickleMaker = () => {\n  let time = 0;\n  for (let i = 1; i < amount; i += 1) {\n    if (i === 1) {\n      time = delay;\n    }else{\n      time = time + step.value;\n    }\n     createPromise(i,time);\n  }\n\n}\n\nfunction clearInput() {\n  delay.value = ``;\n  step.value= ``;\n  amount.value = ``;\n}\n\n\n\n// count += 1;\n//   }, 1000);\n// });\n\n//  if (count===5) {\n//     clearInterval(intervalID);\n//     console.log(`Interval with id ${intervalID} has stopped!`);\n//   }\n\n"],"names":["$47d4ff9957288465$var$delay","document","querySelector","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","console","log","delay","addEventListener","event","preventDefault","delayValue","value","stepValue","amountValue","then","delay1","catch","delay2","$47d4ff9957288465$var$cickleMaker","time","i"],"version":3,"file":"03-promises.7022a571.js.map"}