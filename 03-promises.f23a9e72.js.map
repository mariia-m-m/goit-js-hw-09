{"mappings":"YAEA,IAAMA,EAAQC,SAASC,cAAc,yBAC/BC,EAAOF,SAASC,cAAc,wBAC9BE,EAASH,SAASC,cAAc,0BAChCG,EAAOJ,SAASC,cAAc,QAGpC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,GACFO,QAAQC,IAAI,WACZJ,EAAQ,CAAEK,SAAAX,EAAUY,MAAAX,MAGpBQ,QAAQC,IAAI,SACZH,EAAO,CAAEI,SAAAX,EAAUY,MAAAX,I,GAEpBA,E,IAGFY,MAAK,SAAAC,G,IAAGH,EAAQG,EAARH,SAAUI,EAAKD,EAALF,MAEf,OADFH,QAAQC,IAAI,sBAAuCM,OAAfL,EAAS,QAAYK,OAAND,EAAM,OAClD,CAAEJ,WAAUC,MAAAG,E,IAEpBE,OAAM,SAAAH,G,IAAGH,EAAQG,EAARH,SAAUO,EAAKJ,EAALF,MAClBH,QAAQC,IAAI,qBAAmCM,OAAdL,EAAS,OAAWK,OAANE,EAAM,M,IAK3DC,YAAY,SAACP,EAAOQ,EAAMC,GAExB,IADA,IAAIC,EAAO,EACFC,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAC5BA,IACFD,EAAOE,OAAOF,GAAME,OAAOJ,IAE7BrB,EAAcwB,EAAGD,E,EAYrBxB,EAAK2B,iBAAiB,UARL,SAAAC,GACfA,EAAMC,iBACN,IAAMC,EAAanC,EAAMoC,MACnBC,EAAYlC,EAAKiC,MACjBE,EAAclC,EAAOgC,MAC3BpB,QAAQC,IAAIkB,EAAYE,EAAWC,GACnCZ,YAAYS,EAAYE,EAAWC,E","sources":["src/js/03-promises.js"],"sourcesContent":["// const { formats } = require(\"flatpickr/dist/utils/formatting\");\n\nconst delay = document.querySelector('input[name = \"delay\"]');\nconst step = document.querySelector('input[name = \"step\"]')\nconst amount = document.querySelector('input[name = \"amount\"]');\nconst form = document.querySelector(\"form\")\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        console.log('Success');\n        resolve({ position, delay })\n      }\n      else {\n        console.log('Error')\n        reject({ position, delay })\n      }\n    }, delay);\n\n  })\n    .then(({ position, delay }) => {\n      console.log(`✅Fulfilled promise ${position} in ${delay}ms`)\n      return { position, delay };\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌Rejected ptomise ${position} in${delay}ms`)\n    }\n    );\n}\n\npromiseStep=(delay, step, amount) => {\n  let time = 0;\n  for (let i = 1; i <= amount; i += 1) {\n    if (i) {\n      time = Number(time)+Number(step)\n    }\n    createPromise(i, time);\n  }\n}\n\nconst onSubmit = event => {\n  event.preventDefault();\n  const delayValue = delay.value;\n  const stepValue = step.value;\n  const amountValue = amount.value;\n  console.log(delayValue, stepValue, amountValue);\n  promiseStep(delayValue, stepValue, amountValue);\n}\nform.addEventListener('submit',onSubmit)\n\n\n// count += 1;\n//   }, 1000);\n// });\n\n//  if (count===5) {\n//     clearInterval(intervalID);\n//     console.log(`Interval with id ${intervalID} has stopped!`);\n//   }\n\n"],"names":["$ce04d3a99e08e73b$var$delay","document","querySelector","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$form","$ce04d3a99e08e73b$var$createPromise","position1","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","console","log","position","delay","then","param","delay2","concat","catch","delay3","promiseStep","step1","amount1","time","i","Number","addEventListener","event","preventDefault","delayValue","value","stepValue","amountValue"],"version":3,"file":"03-promises.f23a9e72.js.map"}